# Sharp feature preserving MLS surface reconstruction based on local feature.pdf
# Converted: 2025-07-19 12:45:30
# Method: pymupdf
# Domain: pixel2physics
# Source: ../layer2_completion/Sharp feature preserving MLS surface reconstruction based on local feature.pdf
# Output: ../layer2_completion/txt/Sharp feature preserving MLS surface reconstruction based on local feature.txt


--- Page 1 ---

Preprint (march 2012)
to appear in Graphical Models 2012
Sharp feature preserving MLS surface reconstruction based on local feature
line approximations
Christopher Weber a
Stefanie Hahmann b
Hans Hagen a
Georges-Pierre Bonneau b
aTechnische Universit¨at Kaiserslautern
bUniversit´e de Grenoble, Laboratoire Jean Kuntzmann, INRIA
Abstract
Sharp features in manufactured and designed objects require particular attention when reconstructing surfaces from unorganized
scan point sets using moving least squares (MLS) ﬁtting. It’s an inherent property of MLS ﬁtting that sharp features are smoothed
out. Instead of searching for appropriate new ﬁtting functions our approach computes a modiﬁed local point neighborhood so that
a standard MLS ﬁtting can be applied enhanced by sharp features reconstruction.
We present a two-stage algorithm. In a pre-processing step sharp feature points are marked ﬁrst. This algorithm is robust to noise
since it is based on Gauss map clustering. In the main phase, the selected feature points are used to locally approximate the feature
curve and to segment and enhance the local point neighborhood. The MLS projection thus leads to a piecewise smooth surface
preserving all sharp features. The method is simple to implement and able to preserve line-type features as well as corner-type
features during reconstruction.
Key words: MLS, sharp feature, surface reconstruction, Gauss map, clustering, point set surfaces
Fig. 1. Left: standard MLS surface. Middle: feature point detection
in point cloud. Right: sharp feature preserving MLS
1. Introduction
Point based surfaces have become a very popular and
attractive mesh less surface representation over the last
decade. They deﬁne a smooth surface using local moving
least squares (MLS) approximations of the data.
Since the initial approach [2] based on Levin’s [18] projec-
tion operator, many improvements in terms of eﬃciency
[3,28], rendering [12], stability [11], studies on properties
and limitations [3,4] and variants using implicit surfaces
[28,16,21] or specialized to non uniform, low dense sam-
pling [8] have been developed.
The main strengths of MLS ﬁtting include natural point
denoising due to local least squares approximation, which
can be seen as a local low pass ﬁlter. They generate smooth
surfaces even in the presence of noise. It is thus assumed
that the input data originates from a smooth surface.
Many scanned, manufactured or designed objects however
exhibit sharp features. Sharp features are an important
design element not only for mechanical parts. It is thus im-
portant to be capable to reconstruct those features not only
for reverse engineering applications such as surface recon-
struction, but also for quality control of a product, where


--- Page 2 ---

the scanned object is compared to the CAD-prototype.
Even though point based surfaces were initially developed
as an eﬃcient visualization tool for point sampled data,
they are nowadays used in a wide range of applications [10].
However, the requirements on point based surfaces to han-
dle uniform noise and to generate a smooth surface is in
contradiction to sharp feature preservation. It is thus not
surprising that for example Amenta and Kil [4] attest in-
stabilities near sharp features.
Although visual smoothness is one of the most required
properties of surfaces or shapes in general, for the men-
tioned applications in product design, reverse engineering
or quality control it is however indispensable to preserve
sharp features during reconstruction.
In this paper we address the problem of sharp feature
preserving surface reconstruction from arbitrary point sets
using moving least squares.
The output is a piecewise smooth point-based surface,
meaning a reﬁnable point cloud with normals. Feature
points are ﬁrst identiﬁed in the point cloud as part of a
pre-processing using an adaptive Gauss-map clustering
technique. Only neighborhoods containing some of the
feature points are modiﬁed. Inside these neighborhoods,
which are used by the projection operator, a local approx-
imating feature curve is computed and serves to make a
local decision in order to segment and enhance the point
neighborhood. Applying standard MLS ﬁtting [18] to the
modiﬁed neighborhoods automatically generates piecewise
smooth surfaces with sharp features since the points are
projected to only one smooth surface part.
All advantages of standard MLS ﬁtting (local smoothness,
robustness to noise) are preserved and augmented with the
ability to reconstruct sharp features.
Similar to RMLS [9] we identify individual neighborhoods
within the regions of identiﬁed feature points, but we don’t
rely on computational expensive robust statistics. Instead
we ﬁt local curves through the identiﬁed feature points in
order to slice the neighborhoods. Contributions and ad-
vantages of our technique in contrast to previous works
[9,11,25,21] can be listed as follows:
• Sharp features are automatically reconstructed, no man-
ual tagging [11,25] of feature lines is required.
• It is shown how local feature curve approximations can
be used to partition the neighborhoods used for MLS
projection.
• The method is much more simple to implement than sta-
tistical methods [9,6,7,21] where many parameters have
to be ﬁne-tuned.
• The quality of reconstructed sharp features is improved
with respect to previous MLS methods, e.g. our local
feature curve approximation and neighborhood modiﬁ-
cation reduces the appearance of jagged edges and pro-
duces smoother features.
• Feature point detection is a costly part here. MLS ﬁt-
ting with sharp features is then done in usual compu-
tation time. Performing the feature point detection in
a pre-computation has the advantage that MLS recon-
structions with diﬀerent smoothness parameters can be
performed multiple times. Our method speeds up such a
process signiﬁcantly.
The rest of the paper will be composed as follows: In Sec-
tion 2, we review related work in the ﬁeld of MLS recon-
struction. Section 3 sets basic notations of MLS ﬁtting.
Section 4 describes the pipeline from feature point extrac-
tion, neighborhood modiﬁcation and sharp feature surface
ﬁtting. Section 5 presents experimental results. Final re-
marks and future work close the paper.
2. Related Works
Moving least squares (MLS) surfaces are a very popular
mesh less surface reconstruction tool [1,2]. In contrast to
the common approach to generate a triangulated mesh,
MLS approximate an unorganized dense, possibly noisy,
set of points by an overall smooth point-based surface
[18]. Many variants have been published [1,9,11,16,25]
and several applications of point-based geometries can be
found in [10]. Preservation of sharp features is not an in-
herent property of MLS ﬁtting, any sharp feature will be
smoothed and appears rounded after the ﬁtting process.
So let us focus now only on MLS approaches with sharp
feature reconstruction in this section.
As one of the ﬁrst, Fleishman et al. [9] presented a MLS
approach that could reproduce sharp features. The so-
called robust moving least squares ﬁtting approach is
based on methods used in statistics to search for outliers
in the point set. It assumes, that the surface consists of
several smooth patches connected by sharp features. The
idea is, that a sample point lying on another smooth patch
will be identiﬁed as outlier during the statistical analysis.
An iterative reﬁtting procedure is necessary to add points
successively to the used neighborhood until an outlier is
detected. Several iterations are necessary. It reconstructs
the smooth surface parts, which in the end are connected
through a sharp feature. Although the resulting surface is
of a good quality, the outlier search and the reﬁtting of the
smooth surface parts are quite tricky to implement. The
method also has problems with jagged edges as pointed out
in [6,7] and needs a quite dense sampling. Our approach
is inspired by the partitioning of the local neighborhood
to reconstruct sharp features, although the way how we
achieve this is completely diﬀerent.
Guenebaud et al. [11] presented APSS, algebraic point set
surfaces. They use moving least squares ﬁtting of spheres
instead of planes. This leads to a good stability in under-
sampled datasets. The sharp feature extraction itself is
done manually by tagging of the point cloud, or automatic
and based on a statistical analysis analogous to [9].
¨Oztireli et al. [21] use a kernel regression technique to re-
construct sharp features. They called it RIMLS, Robust
Implicit MLS. Analogous to [9] they also use a statistics
approach to ﬁnd outliers belonging to diﬀerent smooth
2


--- Page 3 ---

patches on the surface. This technique has global param-
eters that can control the global visual sharpness of the
reconstruction. However the resulting surface remains al-
ways C2-continuous. So the reconstruction does not have a
tangent plane discontinuous sharp feature, but only gives
the visual eﬀect of a sharp feature during rendering. De-
pending on the application, this can be seen either as an
advantage or disadvantage.
An other interesting approach is the ERKPA by Reuter et
al. [25]. ERKPA stands for Enriched Reproducing Kernel
Particle Approximation. In this approach the user has to
tag the sharp features manually and the second step of the
MLS projection (the computation of the local polynomial
approximation) is modiﬁed. Instead of the normal projec-
tion, they add an enrichment function with discontinuous
derivatives to the approximation function. The enrichment
functions are compactly supported with a user speciﬁc
support size to control the inﬂuence of the sharp feature.
For n features, n enrichment functions are needed. Our
approach doesn’t require any manual user interaction.
Ohtake et al. [23] introduce the multi-level partition of
unity implicits. Piecewise quadratic functions are used to
capture the local surface and then use weighting functions
that blend together these local shapes of the surface. An
octree subdivision that adapts to variations in the com-
plexity of the shape is used. Sharp corners and edges can
be reconstructed by selecting appropriate shape functions.
Daniels et al. [6,7] build up on Fleishmans approach [9]
to project points onto the features of the dataset. A co-
variance analysis for smoothing and growing polylines of
the detected feature points leads to a global approxima-
tion of feature lines. Those feature lines are then used as
starting points for the construction of a triangle mesh via
an advancing-front algorithm. This approach is related
to ours only in the sense that they provide a pipeline for
global feature curve extraction. But they don’t apply it to
MLS surface ﬁtting.
Lipman et al. [19] also presented a MLS ﬁtting method
that is able to handle sharp features and can handle many
cases like line-type features quite well. But as they men-
tion themselves, their method needs careful ﬁne tuning in
presence of noise and has problems with structures like
the corner of a cube. Both situations are handled by our
approach as we will show in Sections 4.2.5 and 5.
In contrast to previous MLS methods for sharp feature
reconstruction that use statistics methods (forward search
combined with Levin’s MLS [9], or local kernel regression
combined with implicit MLS [21]), we derive our method
by enhancing basic MLS with both, an automatic adaptive
feature points identiﬁcation procedure and a neighborhood
segmentation in case a feature belongs to it.
There is also a large number of feature preserving sur-
face reconstruction techniques not based on MLS but
relying on surface meshes. To name a few we refer to
[14,5,13,15,29,31,26,27].
3. MLS basics and notations
The MLS surface of Levin [18] is a point based surface
representation approximating a given set of point samples.
Let P = {p1, · · · , pn} , pi ∈R3 be a set of unorganized
points sampled from a surface. Let Np denote the set of
k-nearest neighbors of p and Ip the index set of Np. Note
that k << n. The MLS surface SP is deﬁned implicitly by
a projection operator Ψ, that projects points from a vicin-
ity of the MLS surface onto the surface itself. SP is then
deﬁned as the set of points projecting onto themselves, i.e.
the ﬁx points of the operator.
The projection p 7→Ψ(p) of a point p is motivated by
the fact that the surface can be locally approximated by a
function. Its computation following Alexa et al. [2] is split
into three steps:
a) For a given point p and its local neighborhood Np com-
pute a local tangent reference plane H = {x| ⟨n, x⟩−D =
0, x ∈R3}, n ∈R3, ∥n∥= 1 by minimizing
X
i∈Ip
(⟨n, pi −p −tn⟩)2 w (∥pi −p −tn∥)
(1)
among all normal directions n and oﬀsets t. ⟨·, ·⟩denotes
the dot product in R3. w is a smooth monotone decreasing
weighting function
w(d) = e−d2
h2 ,
(2)
where h can be used as a parameter to adjust the smooth-
ing and interpolation behavior.
b) Find a bivariate polynomial approximation g : H 7→R
to the surface in a neighborhood Np of p by a weighted
least squares ﬁt similar to (1). Let qi be the orthogonal
projection of pi onto H, (xi, yi) its local coordinates, hi =
∥pi −qi∥the height of pi over H. The coeﬃcients of g are
computed by minimizing
X
i∈Ip
(g(xi, yi) −hi)2w (∥pi −p −tn∥).
(3)
c) The projection of p is ﬁnally given by
Ψ(p) := p + (t + g(0, 0))n.
(4)
Implementation details can be found in [2].
4. Sharp feature preserving MLS
Our method decomposes into 2 separate phases. First,
sharp feature points are marked in the point set. This can
be done as a pre-processing. In the second main phase,
the selected feature points serve as indicator to modify the
local neighborhood for a point being projected.
Performing the most diﬃcult and most time consuming
feature point detection part, in a separate (pre-processing)
3


--- Page 4 ---

phase has some advantages. First, once the feature points
are marked in a given point set, an important part of com-
putation time is gone. The user has thus the possibility to
recompute the MLS surface with diﬀerent sets of parame-
ters in order to ﬁne-tune the smoothness of the surface and
the sharpness of the features without having to recompute
the feature points again.
Second, both parts of the method rely on local neighbor-
hood computations. The k-nearest search is thus done only
once, stored and reused for MLS projection and neighbor-
hood modiﬁcation.
4.1. Marking the sharp feature points
Detection of sharp features in point clouds is not a trivial
task because of possible noise in the data set. Since we only
need the points belonging to a sharp feature to be marked,
any of the methods [30,6] seems appropriate. Several other
existent techniques for point clouds are dedicated to detect
points on any kind of characteristical feature, e.g. points
with high curvature value being not necessary a sharp fea-
ture [22,24,20]. These methods are however not appropri-
ate here, since they either produce a large band of feature
points or they reconstruct global feature lines using splines
which is quite costly. Let us just summarize the method we
use. All details can be found in [30].
The main idea here comes from the following observation
for piecewise smooth curves and surfaces: The Gauss map
of a particular point and its small neighborhood on a curve
in 2D for example behaves diﬀerent whether the point is a
sharp feature or not. In fact there are 3 typical clustering
behaviors to observe: one cluster when the point belongs
to a ﬂat region, a large fuzzy cluster for a point of a curved
region or 2 distinct clusters in case of a sharp feature point.
In 3D the clustering behavior is similar, except that more
than 2 clusters may appear for a corner-type feature.
In the present setting however the input is not a smooth
continuous surface, but an unstructured set of 3D points
sampled from a surface without any normal information
available. The expected output is a subset of points marked
as points belonging to sharp features of the geometry, the
so-called feature points. The algorithm ﬁrst computes local
neighborhoods for all data points using a kd-structure. For
each data point inside its neighborhood, a so-called discrete
Gauss-map clustering is computed to decide whether a data
point p belongs to a sharp feature or not. Since no normals
are available, all possible triangles ∆(p, xi, xj), formed of
p with two other points xi, xj ∈Np, i, j = 1, . . . , k are
computed. The Gauss map of these triangles is then clus-
tered using a geodesic distance criteria. The clustering be-
havior of the Gauss map of each point p can now be ana-
lyzed in order to decide if it’s a sharp feature point or not.
Note that for each triangle 2 opposite normal directions are
mapped to the unit sphere. Each cluster has thus an oppo-
site counter part on the sphere. In Figure 2 a 2D illustration
is given. 3 typical clustering behaviors are shown from left
to right corresponding to a point belonging to a ﬂat region,
to a curved region or to a sharp feature. In 3D the cluster-
ing behavior is similar, except that more clusters may ap-
pear for a corner-type feature. [30] presents ﬁnally an aug-
mented adaptive version of this basic idea. It is adaptive in
the sense that optimal local parameters are computed au-
tomatically so that very ﬂat as well as very acute features
can be recognized robustly even in the presence of noise.
Fig. 2. 2D examples of a case resulting from Gauss-map clustering.
Left: Clustering situation in ﬂat area; middle: the curved case shows
no clustering; right: in case of a sharp feature clearly distinguishable
clusters are formed
4.2. MLS surface computation
4.2.1. Overview
After applying the feature detection method, we know
for each point in the point set if it belongs to a sharp fea-
ture or not. This knowledge is exploited in the MLS ﬁtting
process in order to reconstruct sharp features as follows.
Let p be the point that is currently projected onto the
surface. A neighborhood Np of p is already available from
the previous feature detection step.
Our strategy for sharp feature reconstruction is not to
modify the mathematical formulation of the MLS method,
but to modify the neighborhoods and thus the projection
operator. A standard MLS projection is applied to all
points, except if their neighborhood contains sharp feature
points. Only then, the neighborhood is modiﬁed before
projection applies.
Basically the neighborhood modiﬁcation partitions Np
into two or three subsets, depending on the type of fea-
ture (line or corner) occurring inside. This partitioning is
performed by clipping the neighborhood points close to p
against a so-called local feature curve. This curve approxi-
mates the sharp feature locally inside Np. Finally, the curve
is up-sampled in order to smooth the sharp feature curve
and to ensure equal quality everywhere. p is then projected
on the surface part closest to p.
Each neighborhood subset deﬁnes in fact a diﬀerent
smooth surface. Together these surfaces meet with discon-
tinuous tangent planes creating thus the sharp feature.
The method is able to construct sharp features even in
the case of corner-type features. Let us ﬁrst treat the gen-
eral case of a line-type feature traversing the neighborhood
Np, meaning a it curved feature line. The case of a corner
4


--- Page 5 ---

Fig. 3. Local neighborhood modiﬁcation: a) the neighborhood of p (blue) is constructed. b) the feature points fi (red) are identiﬁed and the
local feature curve is constructed. c) the points xi ∈Np not belonging to the same surface part as p are removed from Np. d) the removed
points are replaced by samples from the feature curve.
and the way how to decide the type of feature will be han-
dled later in Sections 4.2.5 and 4.2.6.
4.2.2. Local feature curves
Fig. 4. a) Feature curve computation: red points are the feature
points fi. A cubic B´ezier curve F (green) approximates the feature
points. The B´ezier points b0 and b3 are set to the extremal feature
points. A simple heuristic determines b1, b2. Together they form the
control polygon on F (gray dotted); b) Situation with only a small
number of feature points fi in Np c) Situation of a poor sampled
dataset in the extreme case of non uniform sampling
Let us denote x1, x2, ..., xk ∈Np ⊂P the k-nearest
neighborhood of p, and fi the identiﬁed feature points
among the set Np. When a feature traverses Np, the points
xi deﬁne two diﬀerent surface parts.
We are interested only in the subset of points xi which
deﬁne the surface part closest to p. To this end a feature
curve is locally reconstructed as a cubic B´ezier curve F
deﬁned by
F(t) =
3
X
i=0
biB3
i (t),
bi ∈R3
(5)
and using the following heuristic to determine control
points bi.
Since the neighborhood Np represents only a very small
part of the surface (|Np| = k with k << n), we can assume
the traversing feature having a simple shape. Furthermore
fi being unsorted, we take the couple of feature points fi
and fj with largest distance to deﬁne the ﬁrst and last
B´ezier control points b0 := fi and b3 := fj. The remaining
fk are now sorted with respect to b0 and b3. If there are
exactly four feature points, b1, b2 are set accordingly. If
Fig. 5. Examples of computed local feature curves (black curve)
approximating the cyan feature points detected in the neighborhood
of p (blue point). Examples depicted from real surfaces in Figs.11
and 13.
there are more than four feature points, the set is divided
in two parts and an arbitrary representative of each subset
is chosen and set to be b1, b2. In Figure 4(a) an example of
feature curve computation from 5 feature points is shown.
This is a rough approximation, but suﬃcient when assum-
ing that Np represents a very small portion of the initial
point set. As one alternative, a more sophisticated curve
approximation would be costly without any extra beneﬁt.
Taking F as a simple straight line as another alternative
however would result in a poor quality feature curve.
Implementation issues:
(1) With a neighborhood size of k = 20 we generally get
4 or 5 feature points in Np. This corresponds in mean to
the number of points which can be aligned to a straight
line traversing a neighborhood in the middle of 20 points
which are placed regularly in a circle or quad. See Fig. 5
for some real data examples.
(2) In case the number of feature points is < 4 in Np we
don’t perform any neighborhood modiﬁcation since not
enough data is available for a reliable approximation of a
local feature. The situation may correspond to a feature
placed near the border of Np, so that the number of points
which would be eliminated by the feature curve is so small
that their inﬂuence during the projection is also small, see
Figure 4(b). Or it may correspond to errors in the feature
detection.
(3) In the case of very special non-uniform sampling of P
the method may fail, see Figure 4(c) for an example.
5


--- Page 6 ---

Fig. 6. Left: Gauss-map clustering. Right: Angle criterion. Both ap-
proaches can be used for neighborhood clipping in case of a line-type
feature.
4.2.3. Modiﬁcation of neighborhood: Clipping Np
The locally generated feature curve F will now serve to
divide the points xi ∈Np in two subsets and to keep the
subset which is ’close’ to p. Since the neighborhood Np
corresponds to a very small part of the point set, one can
assume the two surfaces being almost planar near the fea-
ture line (a similar assumption is done for the MLS surface
anyway). Two methods are possible:
(1) A Gauss-map clustering can be used again. For each
point xi, i = 1, . . . , k which is not a feature point a trian-
gle Ti = δ(xi, fj, fk) is formed together with two feature
points closest to xi. The corresponding normal vectors de-
ﬁne the Gauss-map to be clustered. The result are two clus-
ters, each cluster represents the points xi deﬁning one of
the two surface parts, Fig. 6-left.
(2) An alternative method for separating the neighbor-
hood points into two sets, is to compare the angles between
the projection vectors of each point xi onto the feature
curve F with the projection of p onto F. An angle greater
than a ﬁxed threshold value, would indicate that xi and p
belong to diﬀerent surface parts, see Fig. 6-right.
Discussion:
Note that the existence of two surface parts seperated by
a sharp feature is already acquired in this neighborhood.
We don’t need to decide whether there are two surface
parts, but only whether the points belong to one or to the
other part. Both methods can make proﬁt from the pre-
processing feature detection method and the angle thresh-
olds used there. In fact, to decide if a point is a sharp feature
point or not, a range of angles is computed there. Outside
this range, the point is assumed to belong to a smooth sur-
face part. So, in practice a range of [40◦, 140◦] is used to
deﬁne a sharp feature. The same range is used here to sep-
arate the points into two parts on either side of the feature
curve. It is thus guaranteed that the present sharp feature
reconstruction method works with the same precision than
the previous feature detection in particular in the presence
of noise. For the examples in this paper the ﬁrst method
has been used.
4.2.4. Up-sampling of the feature points
After clipping Np, the modiﬁed neighborhood is now re-
duced in size. In order to guarantee the modiﬁed MLS pro-
jection to work with the same precision everywhere, the
modiﬁed neighborhood has to be of same cardinal k as Np.
To this end additional points are sampled along the local
feature curve, see yellow points in Figure 3(d). This par-
ticular choice is motivated and justiﬁed by the fact that
increasing the number of local feature points
• strengthens the sharp feature reconstruction, and
• is smoothing the curve of the edge that is deﬁned by
the projection operator. A possible undersampling of the
data points along sharp features can thus be resolved.
Note that this local sampling step solves a problem that
has previously been raised as a limitation in [9] (end of
Sect.5) and left for future work there. It is indeed a draw-
back of statistic-based feature reconstruction methods that
the projection operator may not be smooth along sharp
features.
4.2.5. Special case: corner feature
Up to now, we have assumed that only a line-type feature
traverses the local neighborhood. It can happen that several
sharp features meet at a common vertex. The corner of a
cube is a typical example. If this situation happens inside a
neighborhood the approach presented for line-type features
in the previous sections would not work well, since a single
curve cannot ﬁt three or more feature curves meeting at a
common vertex.
One way to solve this problem would be to construct
several feature curves inside the neighborhood. It remain
the questions how to ensure that the independently con-
structed curves meet at a common corner point? and how
to chose this point? These questions are partially answered
in Daniels et al. [7]. However, the critical mass necessary
for [7] is not given here.
Fig. 7. Gauss-map clustering used for neighborhood clipping in case
of a corner-type feature.
The solution we propose is consistent to the rest of the
paper, since using again the Gauss-map clustering tech-
nique. It is composes of two steps:
Step 1: neighborhood clipping
What we need is a set of points belonging to the same
smooth surface part as p. Note that the feature points
separating the surfaces parts are already available. It’s
therefore suﬃcient to use the clipping technique (1) pro-
posed in Sect. 4.2.3: a Gauss-map for all neighborhood
points xi ∈Np is constructed by computing the normals of
6


--- Page 7 ---

all triangles ∆(p, fj, fk) and ∆(xi, fj, fk) (xi ̸= fj, fk),
i ∈Ip, where fj and fk can be chosen to be the two feature
points, e.g. closest to xi. Clustering of these normals re-
sults in three (cube’s corner) or more clusters. The cluster
representing p thus designates the subset of {xi} deﬁning
the requested surface part closest to p. All other points are
removed from Np, see Fig. 7.
Fig. 8. Result of the feature clustering near the corner of a cube
Step 2: neighborhood up-sampling
In order to increase the number of points inside Np and
simultaneously increase the precision of the sharp feature,
the set of feature points in Np is increased by up-sampling
some local feature curve. The computation of this feature
curve in the case of a corner-type feature requires to di-
vide the marked feature points into diﬀerent sets, each set
containing only the feature points belonging to one edge,
see the colored points in Fig.9a) illustrating the case of
a cube’s corner. For eﬃciency reasons we don’t compute
these groups of feature points for each p since there may
be many points in the point set close to p having the same
feature points inside their neighborhood. Instead, we mark
during the pre-processing (feature point detection) step
for each detected feature point f all feature points inside
Nf which belong to the same feature line as f. Figure
8 illustrates the result of this computation for a feature
point f (green dot) near a cube corner. The red dots in
the ﬁgure are all the features detected in the data set. Its
neighborhood is presented by the black circle. The yellow
dots are thus the marked neighbor features points inside
Nf and belonging to the same edge.
With these neighbor features marked for each feature
point in the data set, it is now an easy task to determine
for each point p the set of feature points closest to p (i.e.
containing the closest feature point). A cubic B´ezier feature
curve F is computed from this set and used for up-sampling
the modiﬁed neighborhood before projecting p, see Fig.9b).
4.2.6. Characterization of neighborhoods
One last issue remains: how to determine whether a point
neighborhood Np contains a line-type feature or a corner-
type feature? The number of Gauss-map clusters computed
for the neighborhood clipping (Fig. 6 and 7) clearly in-
dicates if the points belong to two diﬀerent surface parts
(line-type) or to more surface parts (corner-type).
Fig. 9. Local neighborhood modiﬁcation near corners: a) marking sets
of feature points belonging to diﬀerent features. b) selection of the
closest feature set closest to p, generation of the local feature curve,
clipping of local Neighborhood Np. c) up-sampling the neighborhood
with points on feature curve.
5. Results
We implemented and tested the sharp feature surface re-
construction method developed in the previous sections.
Let us report here on 4 types of input data
· academic models without any noise (cube with hole, bi-
linear surfaces)
· academic models with random noise added (cube)
· complex models (fan disk, trimstar, octﬂower)
· raw data output of a scanner (drill).
We focus in particular on the sharp edges, since classic MLS
projection is applied everywhere else on the model. Our
method is in total slower than classic MLS due to the fea-
ture point pre-processing and neighborhood modiﬁcation.
It oﬀers however the possibility to separate feature point
detection from the projection step. All feature point com-
putations including detection and the list of nearest con-
nected neighbors can be pre-processed. Timings are given
in [30]. Without these preprocessing steps, timings close to
the classical MLS can be reached, since only a few number
of the points (8% in the cube example of Fig.11) undergo
a neighborhood modiﬁcation with O(k) operations for fea-
ture curve computation, clipping and up-sampling (k =
|Np|). For that reason we don’t add timing tables here.
Figure 1 shows our sharp feature preserving reconstruc-
tion in comparison to Levin’s classical MLS.
Robustness to feature detection
The present technique depends on a prior feature points
detection method. The Gauss-map clustering method [30]
has been proven to be reliably enough.
It can be observed, for example that perfect (exact) input
data without noise leads to perfect recognition of feature
points and our resulting MLS surface is perfect as well, see
ﬁrst row of Figure 11. Any other feature detection method
can be used here instead.
It can be observed, furthermore that our ﬁtting method
is able to auto-correct the input data. In case where only
sparsely distributed feature points are detectable due to
noise in the input data for example, our method is able to
correct this failure up to a certain limit. Figure 10 shows the
octaﬂower data set. It is a noisy data set and it is not clean
7


--- Page 8 ---

Fig. 10. Noisy octaﬂower model. Left: feature points detected. Middle
and right: sharp reconstructions.
in the sense that data points are not exactly sampled on the
sharp features of the octaﬂower. Even though many feature
points are missing in the center and along the sharp curves
(Fig.10-left), the resulting surface only looses sharpness at
the center point, all other curves are sharply reconstructed.
Let us note also the smoothness of these curves. The reason
for this auto-correction property lies in the facts that on
one hand local and continuous smooth feature curves are
available and that on the other hand they are up-sampled
inside the local neighborhoods.
In Figure 12 another academic example is shown. It rep-
resents two bilinear surfaces with a common sharp edge.
The angle of the tangent planes varies along the edge from
acute (40◦) to obtuse (140◦). This case of varying angles
of a sharp feature is important in real life data sets and
could cause problems for feature detecting and reconstruct-
ing systems using global sets of parameters. The adaptive
feature detection method here ensures these cases to be
covered by our reconstruction method.
Robustness to noise
The beneﬁts of using local feature curves are also visible in
the presence of noise. Figure 11 shows an academic example
which has been perturbed. The noise is obtained by adding
to each point a random vector chosen in a ball whose radius
is 0.2% resp. 0.5% of the bounding box size of the model. In
Figure 11 we show the clean model without noise in the top
row, the 0.2% perturbed model in the middle row, and the
0.5% perturbed model in the bottom row. In each row the
performance of the feature detection, standard MLS and
our method are compared. As one can see, our sharp MLS
reconstruction uses the beneﬁt of the smoothing capabili-
ties of MLS in the ﬂat areas of the dataset while the sharp
edges are still reproduced.
Complex data sets
Further data sets have been tested. The fan disk model
in Figure 13, and the trim star model in Figure 1, are all
available through the AIM@SHAPE Shape repository 1 .
With the fan disk model, we would like to focus onto the
region where the sharp feature looses its sharpness. The
1 shapes.aimatshape.net
Fig. 11. Cube with hole. From left to right: original data set, smooth
MLS reconstruction, feature points detected, our method. First row:
clean data set without noise. Second row: data set perturbed with
0.2% random noise. Third row: data set perturbed with 0.5% random
noise.
Fig. 12. Two bilinear surfaces with a common sharp edge. The angle
of the tangent planes vary along the feature from acute (40◦) to
obtuse (140◦).
Fig. 13. Fandisk. Left: smooth standard MLS reconstruction. Middle:
feature points detected. Right: our method. Bottom: front view of a
smooth and sharp MLS reconstruction of the fandisk
transition behaves smoothly and natural.
The raw data set of a drill output from a CyberwareT M
scanner in Figure 14 shows from left to right the feature
points detection, shading of the original data, the classic
8


--- Page 9 ---

MLS reconstruction, the sharp feature preserving recon-
struction. This is a kind of worst case example. In the
closeup in Figure 15 the diﬀerence between the smooth and
the sharp reconstruction is clearly visible. The smooth re-
construction not only smooth the jagged edges of the orig-
inal data but also the whole cutting edge of the drill. The
sharp reconstruction is able to preserve the sharp cutting
edge.
Fig. 14. Drill raw data by CyberwareT M scanner. From left to right:
shading of the original data, the classic MLS reconstruction, feature
points detection, the sharp feature preserving reconstruction.
Fig. 15. Close up of the drill data; From left to right: shading of
the original data, the classic MLS reconstruction, the sharp feature
preserving reconstruction.
Comparison to known methods
We compared our method to other available feature sensi-
tive reconstruction methods. The cube with hole data set
was reconstructed with RIMLS [21] and APSS [11] using the
Meshlab 2 implementations. In Figure 16 the original data
set was taken. The same data set perturbed with 0.2% ran-
dom noise served in Figure 17. Figures 16(a),(b) show two
reconstructed surfaces by RIMLS and APSS. Naturally, in
these reconstructions the edges are smoothed out. In Fig-
ure 16(c), we show the surface that is reconstructed using
the new neighborhood modiﬁcation approach. The reason
is inherent to RIMLS characteristical behavior to produce
C2-continuous surfaces. In sharp regions curvature values
increase, but the surface remains curvature continuous. The
RIMLS reconstruction for the cube example took 170s, our
method took 190s. Hereby we used the parameter settings
proposed in Meshlab for sharp feature reconstruction. The
2 meshlab.sourceforge.net
APSS implementation in Meshlab unfortunately lacks the
ability to reconstruct sharp features. But it can be used as
an example to show the diﬀerence between a usual MLS
reconstruction method and reconstructions with sharp fea-
ture preserving.
Another issue is sensitivity to noise. Figure 17 compares
our method to others in the presence of noise. The noise is
much more visible in Figures 17(a) and (b). The reason for
that in RIMLS is that both eﬀects together (sharp feature
and smooth surface) can not be obtained. When setting the
parameters, one has to choose. We privileged sharp features
in Figure 17(a), but then the sensitivity to noise increased
and leads to this bumpy surface. A smoother surface can
be obtained, but then the features loose their sharpness
signiﬁcantly. Both Figures 16 and 17 clearly show the ad-
vantages of a sharp feature preserving method. The other
sharp feature reconstruction in [9] was not tested. An im-
plementation was not available and seems to be tricky.
Figure 18 is a further comparison. Here the angle of the
tangent planes along the sharp feature is continuously vary-
ing from acute to obtuse. The closeups give better insight.
Fig. 18. MLS reconstructions using RIMLS and our method, the
close up shows the diﬀerent behavior along sharp features
Limitations
In the presence of noise it is challenging to reconstruct
sharp features as well as smooth surfaces in general. The
present method is however able to enhance the sharpness
in comparison to other works, but to a limited extend.
Even though our method reduces the dependency from
parameter ﬁne tuning (most parameters for feature point
detection are adaptively computed) it still depends on the
appropriate choice of k. Similar to all MLS methods we
acknowledged this problem without being able to propose
a better solution.
6. Conclusion and future work
Our motivation was to show that it is possible to improve
MLS sharp feature reconstruction with an algorithm which
9


--- Page 10 ---

Fig. 16. MLS reconstructions using RIMLS — APSS — our method
Fig. 17. MLS reconstructions with low noise using RIMLS — APSS — our method
is not too tricky to implement. Simplicity and eﬃciency
characterizes our method. And what is more important, it
improves the smoothness of features curves of statistical
methods such as [9]. We presented a new augmented ver-
sion of the classic Moving Least Squares method to recon-
struct a surface from point cloud data with sharp features.
We not only segment the local neighborhood but modify it
before the moving least squares projection step to achieve
the sharp feature preservation. The method is capable of
handling sharp line-type features as well as corner features.
The resulting surface can be used in many applications such
as reverse engineering or quality control in a design process.
The parameters available for ﬁne-tuning of the result-
ing surface are the same as in the standard MLS approach.
The smoothness parameter h from the weight function in
(3) allows to adapt between interpolation and approxima-
tion. The size k of the local neighborhood governs about
the quality of the sharp feature. But the size of the neigh-
borhood is related to the computation time. In practice,
k > 20 is not reasonable.
It would ﬁnally be interesting to investigate the trade-oﬀ
between quality, simplicity and speed by comparing the
present method to methods using global optimization [9]
which are more robust but computationally more expen-
sive.
The use of global feature curves instead of local ones is an-
other interesting issue. We assume that computation time
will increase, but it would be interesting to pursue in the
future.
Another possible improvement of this present method could
be to guarantee C0-continuity. For this one has to guaran-
tee uniqueness of the local feature curve or to use the more
costly pre-computation of global feature curves. Here again
the question remains if the quality of the resulting surface
could be improved.
ACKNOWLEDGMENTS
The fandisk and trim-star are provided courtesy of MPII,
all by the AIM@SHAPE Shape Repository. The drill model
is courtesy of Sergei Azernikov, Siemens Corporate Re-
search, Princeton. This work was partially supported by
the IRTG 1131 of the DFG (German Research Founda-
tion), and by the Deutsche Forschungsgemeinschaft INST
248/72-1.
10


--- Page 11 ---

References
[1]
Alexa M., Behr J., Cohen-Or D., Fleishman S., Levin D.,
Silva T.: Point set surfaces. IEEE Visualization 2001 (2001).
[2]
Alexa, M., Behr, J., Cohen-or, D., Fleishman, S., Levin, D.,
and Silva, C. T. Computing and rendering point set surfaces.
IEEE Transactions on Visualization and Computer Graphics 9
(2003), 3–15.
[3]
Amenta, N. and Kil, Y.J. The Domain of a Point Set Surface.
Eurographics Symposium on Point-Based Graphics (2004).
[4]
Amenta, N. and Kil, Y.J. Deﬁning Point-Set Surfaces. In In
Proceedings SIGGRAPH 04 (2004).
[5]
Azernikov S., Miropolsky A., and Fischer A.
Surface
reconstruction of freeform objects based on multiresolution
volumetric method In ACM symposium on Solid modeling and
applications (SM ’03) (2003).
[6]
Daniels, J., Ha, L., Ochotta, T. and Silva, T. Robust Smooth
Feature Extraction from Point Clouds. In SMI (2005).
[7]
Daniels, J., Ha, L., Ochotta, T. and Silva, T.
Spline-
based feature curves from point-sampled geometry. The Visual
Computer 24(6), (2008).
[8]
Dey T. K. and Sun J.
An Adaptive MLS Surface for
Reconstruction with Guarantees.
Symposium on Geometry
Processing (SGP 2005).
[9]
Fleishman S., Cohen-Or D., Silva C.: Robust moving least-
squares ﬁtting with sharp features. ACM Trans. Graph. (2005),
37–49.
[10] Gross M., Pfister H-P. Point-Based Graphics. The Morgan
Kaufmann Series in Computer Graphics, (2007).
[11] Guennebaud G., Gross M.: Algebraic point set surfaces. In In
Proceedings SIGGRAPH 07 (2007).
[12] Guennebaud G., Germann M. and Gross M.:
Dynamic
Sampling
and
Rendering
of
Algebraic
Point
Set
Surfaces
Computer Graphics Forum 27, 2 (2008), 653–662.
[13] Hildebrand K., Polthier K., and Wardetzky K.
Smooth
feature lines on surface meshes. Proceedings of Symposium on
Geometric Processing, 2005.
[14] Hoppe H., DeRose T., Duchamp T., Halstead M., Jin H.,
McDonald J., Schweitzer J., Stuetzle W.: Piecewise Smooth
Surface Reconstruction ACM SIGGRAPH 1994 Proceedings ,
1994, 295-302.
[15] Hubeli A. and Gross M. Multiresolution feature extraction for
unstructured meshes. Proceedings of IEEE Visualization, pages
287–294, 2001.
[16] Kolluri R.: Provably good moving least squares. ACM SIAM
Symposium on Discrete Algorithms (2005).
[17] Levin D.: The approximation power of moving least-squares.
Mathematics of Computation 67 (1998), 1517–1531.
[18] Levin D.: Mesh-independent surface interpolation. Geometric
Modeling for Scientiﬁc Visualization (2003), 37–49.
[19] Lipman Y., Cohen-Or D., Levin D.:
Data-dependent MLS
for faithful surface approximation.
Symposium on Geometry
Processing (2008), 59–67.
[20] M´erigot, Q., Ovsjanikov, M., and Guibas, L. J.
Robust
voronoi-based curvature and feature estimation. In Symposium
on Solid and Physical Modeling (2009), W. F. Bronsvoort,
D. Gonsor, W. C. Regli, T. A. Grandine, J. H. Vandenbrande,
J. Gravesen, and J. Keyser, Eds., ACM, pp. 1–12.
[21] Oztireli C., Guennebaud G., Gross M.: Feature preserving
point
set
surfaces
based
on
non-linear
kernel
regression.
Computer Graphics Forum 28, 2 (2009).
[22] Gumhold, S., Wang, X., and McLeod, R. Feature extraction
from point clouds. Proceedings of 10th International Meshing
Roundtable V (2001).
[23] Ohtake Y., Belyaev A., Alexa M., Turk G. and Seidel H-
P.
Multi-level partition of unity implicits
In In Proceedings
SIGGRAPH 2003 (2003).
[24] Pauly, M., Keiser, R., and Gross, M.
Multi-scale feature
extraction on point-sampled surfaces.
Computer Graphics
Forum (2003).
[25] Reuter P., Joyot P., Trunzler J., Boubekeur T., Schlick
C.:
Surface reconstruction with enriched reproducing kernel
particle approximation.
Eurographics Symposium on Point-
Based Graphics (2005).
[26] Scheidegger, C.E., Fleishman, S., Silva, C.T. Triangulating
point set surfaces with bounded error. Symposium on Geometry
Processing (2005), 63-72.
[27] Schreiner,
J.,
Scheidegger,
C.,
Fleishman,
S.,
Silva,
C.
Direct
(re)meshing
for
eﬃcient
surface
processing.
Comput.Graph. Forum 25 (2006), 527536.
[28] Shen, C., O’Brien, J. F., and Shewchuk, J. R. Interpolating
and approximating implicit surfaces from polygon soup. ACM
Trans. Graph. 23 (August 2004), 896–904.
[29] Watanabe K. and Belyaev A. Detection of salient curvature
features on polygonal surfaces. Computer Graphics Forum, pages
385–392, 2001.
[30] Weber C., Hahmann S., Hagen H.: Sharp feature detection in
point clouds. In In Proceedings SMI 10 (2010).
[31] Weinkauf
T.
and
G¨unther
D.
Separatrix
Persistence:
Extraction of Salient Edges on Surfaces Using Topological
Methods.
Computer
Graphics
Forum
(Proc.
SGP
’09),
28(5):1519–1528, July 2009.
11
