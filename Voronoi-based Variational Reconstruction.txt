# Voronoi-based Variational Reconstruction.pdf
# Converted: 2025-07-19 12:45:30
# Method: pymupdf
# Domain: pixel2physics
# Source: ../layer2_completion/Voronoi-based Variational Reconstruction.pdf
# Output: ../layer2_completion/txt/Voronoi-based Variational Reconstruction.txt


--- Page 1 ---

Eurographics Symposium on Geometry Processing (2007)
Alexander Belyaev, Michael Garland (Editors)
Voronoi-based Variational Reconstruction
of Unoriented Point Sets
P. Alliez1
D. Cohen-Steiner1
Y. Tong2
M. Desbrun2
1 INRIA Sophia-Antipolis
2 Caltech
Abstract
We introduce an algorithm for reconstructing watertight surfaces from unoriented point sets. Using the Voronoi
diagram of the input point set, we deduce a tensor ﬁeld whose principal axes and eccentricities locally represent
respectively the most likely direction of the normal to the surface, and the conﬁdence in this direction estimation.
An implicit function is then computed by solving a generalized eigenvalue problem such that its gradient is most
aligned with the principal axes of the tensor ﬁeld, providing a best-ﬁtting isosurface reconstruction. Our approach
possesses a number of distinguishing features. In particular, the implicit function optimization provides resilience
to noise, adjustable ﬁtting to the data, and controllable smoothness of the reconstructed surface. Finally, the use of
simplicial meshes (possibly restricted to a thin crust around the input data) and (an)isotropic Laplace operators
renders the numerical treatment simple and robust.
Categories and Subject Descriptors (according to ACM CCS): I.3.5 [CG]: Computational Geometry and Object Modeling.
1
Introduction
Surface reconstruction from point clouds is motivated by
a number of CAGD, point-based graphics, and reverse en-
gineering applications where scattered point samples of a
surface need to be turned into a proper, watertight surface
mesh. Particularly challenging are point sets generated by
laser scanners and hand-held digitizers, as they are often
noisy (due to the inherent uncertainty of measurements), un-
organized (due to the merging of several scans), and possibly
containing large holes (due to occlusions during the acquisi-
tion process). In such a context, surface reconstruction can
only be approximating—instead of interpolating—as data
points are more of an indication of proximity to the surface
than actual sample points.
While a number of algorithms can now efﬁciently reconstruct
oriented points (i.e., point sets where a normal is provided
at each sample), fewer methods are able to approximate raw
(unoriented) point sets, with controllable smoothness. In this
paper, we introduce a Voronoi-based variational approach to
surface reconstruction that can equally process unoriented
point sets and oriented point sets, and can even exploit conﬁ-
dence measures on the normals if available. As our technique
is based on isocontouring of a variationally-deﬁned implicit
function deﬁned in the embedding space, we guarantee wa-
Figure 1: Sforza. Our variational method allows high-ﬁdelity recon-
struction of unprocessed point sets (3D scanned Sforza, 200K points).
The ﬁnal mesh is extracted via isocontouring of a scalar function
computed through optimization.
tertightness and smoothness while offering control over data
ﬁtting.
1.1
Related Work
Delaunay-based surface reconstruction techniques were ini-
tially designed to establish a plausible connectivity between
points [Boi84]. One of the ﬁrst reconstruction techniques that
came with theoretical guarantees was proposed by Amenta
and Bern [AB99]. The rationale behind their technique was
that when a sampling is noise-free and dense enough, all
c
⃝The Eurographics Association 2007.


--- Page 2 ---

P. Alliez et al. / Voronoi-based Variational Reconstruction of Unoriented Point Sets
Figure 2: Our reconstruction procedure at a glance. From left to right: input point set; its Voronoi diagram; covariance matrices of the cells
shown as (rescaled) ellipses; Steiner points added through Delaunay reﬁnement (isotropic tensors are assigned to Steiner points); piecewise
linear function f (solution of a generalized eigenvalue problem) that best ﬁts the input data, with the reconstructed curve (isocontouring of f).
Voronoi cells are elongated in the direction of the normal to
the inferred surface. An analysis of the point set’s Voronoi
diagram can then be used to derive an interpolating recon-
structed surface. This technique has stimulated many im-
provements and variants: we refer the reader to [CG06] for
a survey, and to [Dey06] for a recent comprehensive mono-
graph. In practice however, most of these Voronoi-based tech-
niques are interpolatory, thus inadequate in the presence of
noise.
Noise and sparseness in typical point sets have led to an
approximating class of approaches, where an implicit func-
tion is computed such that one of its isosurfaces best ﬁts
the data (see e.g., [OBA∗03]). These implicit approaches
are particularly convenient as they all guarantee a water-
tight 2-manifold surface approximation by construction; they
mostly differ in the norm used to match the point sets and
the isosurface. Approximations of a signed distance func-
tion to the point set [CBC∗01] or to estimated tangent
planes [HDD∗92,BC02] were proposed as possible implicit
functions. More recently, a reconstruction method for ori-
ented point sets was introduced in which an implicit function
f is derived from a Poisson equation ∆f = div(n), providing
the best L2-match between the gradient of f and the input
normals n [KBH06]. In practice, the normal ﬁeld is ﬁrst inter-
polated onto an octree via an isotropic smoothing kernel, of-
fering control of the smoothness of the reconstructed surface.
This algorithm scales remarkably well since it only involves
solving a linear system, and its global L2-minimization na-
ture makes it resilient to noise. These techniques require a
consistent orientation of the normals to perform correctly.
Unfortunately, unless reliable normals are provided, ﬁnding
such an orientation has been recognized to be an ill-posed
problem when the sampling is sparse and noisy. In particular,
one of the most robust approaches to normal orientation is
through labeling a set of Voronoi poles; but it requires little
or no noise and a dense-enough (ε-)sampling to guarantee
consistent results—two conditions rarely met in practice.
Given this intrinsic difﬁculty, recent work has polarized on
handling raw, unoriented point sets without attempting to lo-
cally estimate or orient the normals (e.g., [KSO04,WCS05,
HK06,PSQ06]). Initial work includes methods such as Tensor
Voting [MM06], where local shape is inferred from neigh-
boring sample points even in the presence of noise. More
recently, a spectral reconstruction method [KSO04] has been
shown remarkably robust to outliers due to its reliance on
graph partitioning algorithms [SM00]. However, this method
is interpolatory, requiring a systematic post-smoothing for
noisy point clouds. Similarly, Hornung and Kobbelt [HK06]
propose a min-cut algorithm on a regular grid, also requir-
ing post-smoothing to remove grid aliasing. Finally, an ap-
proach based on eigen analysis but derived purely from an op-
timization standpoint, offers an approximating reconstruction
where smoothness can be controlled [WCS05]—although var-
ious coefﬁcients require adjustment to provide good results.
1.2
Overview
Our approach combines the generality and resilience of spec-
tral methods as it can take a raw, unoriented and noisy point
set as input. It also offers the quality of Poisson-based recon-
struction through global ﬁtting of normal direction evalua-
tions and control over smoothness. Our algorithm performs
equally well when normal information is included in the point
set, even exploiting conﬁdence measurements on the normals
to improve the quality of the reconstructed surface. To pro-
vide a uniﬁed, variational framework for point set surface
reconstruction, our algorithm proceeds in two main steps.
First, if no normal information is provided, we perform a
novel, Voronoi-PCA estimation of unoriented normals in-
duced by the point set (Section 2). This ﬁrst step results in a
tensor ﬁeld which encodes both the (unoriented) normal di-
rection (through its eigenvector of maximum eigenvalue) and
the conﬁdence in the approximation (through its anisotropy).
Second, an implicit function is computed via a generalized
eigenvalue problem (Section 3) so as to make its gradient
best ﬁt the normal directions. Details of the algorithm and its
implementation are given in Section 4, and a series of tests
and comparisons are presented in Section 5.
2
Estimating Unoriented Normals
Our ﬁrst goal is to estimate unoriented normals (along with
their reliability) to the inferred surface from the input point
set if no such information is available. Note that we will
not try to infer an orientation, as this global task will be
incumbent upon the second step of our approach. As a way
of motivating our estimation, we brieﬂy review a few closely
related techniques.
c
⃝The Eurographics Association 2007.


--- Page 3 ---

P. Alliez et al. / Voronoi-based Variational Reconstruction of Unoriented Point Sets
2.1
Background
Normal estimation from point sets has received a lot of at-
tention in the past few years (see e.g., [PKKG03, MNG04,
DLS05,OF05,LP05,HXMP05]). Various strategies have been
proposed, guaranteeing high-order accuracies through, e.g.,
local ﬁtting [CP03]. However, when a point set is noisy and
unstructured, a majority of methods have recourse to one of
two popular techniques, both straightforward to implement.
Principal Component Analysis (PCA) A conventional
technique for estimating normal directions is through local
principal component analysis. The main idea is to deﬁne
a small neighborhood around each input point (e.g., the k-
nearest neighbors [HDD∗92]), compute the covariance ma-
trix of the points in this neighborhood, and deduce the nor-
mal direction from the eigenvector associated to the smallest
eigenvalue of the resulting covariance matrix. Many variants
have been proposed to improve resilience to noise (see, for
instance, [MNG04]).
Voronoi Poles Another common technique for estimating
normal directions is global by nature as it requires the con-
struction of the Voronoi diagram of the input point set. A
subset of Voronoi vertices called poles [AB99] is then ex-
tracted, and used to estimate a normal direction at each sam-
ple point. In absence of noise and for dense-enough samples
this method can be shown to provide a faithful normal es-
timate even for irregular sampling, with convergence rates
depending on the elongation of the Voronoi cells. A variant
by Dey and Sun [DS05] provides more resilience to noise.
2.2
A Voronoi-PCA Approach to Normal Estimation
Given the respective advantages of PCA and Voronoi
poles, we propose a novel normal approximation tech-
nique that combines both of their qualities. We begin
by computing the 3D Voronoi diagram of the input
point set after adding dummy sample points on a very
large bounding sphere (the resulting Voronoi cells of
the input points are therefore not extending to inﬁnity).
As the shape of these cells reﬂects the global dis-
tribution of the points in space, a key observation
is that the covariance matrix of the Voronoi cell
of a sample point provides not only an estimate of
the normal direction, but also a measure of how
reliable this estimate is. Indeed the eigenvector
associated to the largest eigenvalue indicates the
axis along which the cell is elongated (see inset)—
a good approximate of the normal direction if the
samples all lie on a common manifold. Moreover,
as described in [AB99], the conﬁdence in the es-
timate is related to how long and thin the Voronoi
cell is, i.e., to the anisotropy of the covariance tensor.
Covariance Matrix of a Voronoi Cell Let V be a ﬁnite
Voronoi cell associated to a sample point p. The covariance
matrix of V is deﬁned by its order-2 moment with respect to
its center of mass m:
cov(V) =
Z
V
(X −m)(X −m)tdX.
(1)
A simple way to compute this integral is to perform a de-
composition of the Voronoi cell V into tetrahedra, so as to
assemble the ﬁnal covariance matrix in closed form as ex-
plained in Appendix A. If the sampling is of good quality, this
procedure will be very accurate as each Voronoi cell is long
and skinny. However, as Fig. 3(middle) illustrates, Voronoi
cells can become small and isotropic if noise is present.
Covariance Matrix of a Union of Voronoi Cells To render
our estimate robust to noisy point sets, we compute the co-
variance matrix of a union of Voronoi cells (closed-form
formulas are also provided in Appendix A): as the Voronoi di-
agram of the point set partitions the whole domain, elongated
cells are present beyond the noisy area, and accumulating
enough neighbors will eventually render the union elongated
enough (see Fig 3(right)). Notice that the idea of combin-
ing the inﬂuence from neighbors to promote noise resilience
is commonplace, but our technique is adaptive in the sense
that we use as many neighbors as needed to ﬁnd a reliable
approximation as described next.
Figure 3: Voronoi cells of point sets. Left: Voronoi diagram of a
point set without noise. Middle: with noise the cells become irregular.
Right: a denser, noisy point set shows even more diverse cell shapes.
Estimation Procedure We implement our estimation proce-
dure as follows: given a sample point p, we ﬁrst compute
the covariance matrix of its Voronoi cell V(p), and mea-
sure its anisotropy σ ∈[0,1] as σ=1 −isotropy(V), where
isotropy(V) is the ratio between the smallest and the largest
eigenvalues. We then iterate over its k nearest neighbor points
{qi}, and perform the same procedure for V(p)∪V(q1), then
for V(p) ∪V(q1) ∪V(q2), etc., until either the anisotropy
has reached a threshold of 0.9, or we reach the maximum
number of nearest neighbors (typically k = 50). From these
covariance matrices, the one with maximum anisotropy is
then returned. Finally, for normalization purposes, we rescale
this resulting tensor such that its maximum eigenvalue is unit.
Notice that this evaluation procedure will stop at a single
Voronoi cell when the sampling is dense and noise-free: there
is indeed no incentive to add an extra neighborhood Voronoi
cell as it would mainly thicken the domain of integration in
Equ. (1), thus decreasing anisotropy.
This procedure beneﬁts from both the qualities of PCA (lo-
cal analysis of a number of neighboring samples) and those
c
⃝The Eurographics Association 2007.


--- Page 4 ---

P. Alliez et al. / Voronoi-based Variational Reconstruction of Unoriented Point Sets
of the Voronoi-based approach (global analysis of the sam-
ple repartition via the Voronoi diagram). Our Voronoi-PCA
normal estimation technique can be seen as an integral PCA
approach, similar to [PWY∗06] for curvature estimation: in-
tegration (over Voronoi cells in our case) leads to more stable
estimations compared to the pole approach which bases its
estimation on the position of a single pole. As the quality of
this normal estimation is important to our reconstruction pro-
cedure, we will present in Section 5.1 numerical experiments
showing that this procedure outperforms the two normal esti-
mation techniques that it combines.
3
Generalized Eigenvalue Problem
We consider at this stage that a (covariant) tensor ﬁeld encod-
ing the normal directions has been either estimated through
our Voronoi-PCA approach, or derived from normal informa-
tion in the input data (as nnt). We now wish to compute an
implicit function such that its gradient is best aligned with
the principal axes of the tensor ﬁeld: isosurfacing this scalar
function will provide a best-ﬁtting reconstruction.
3.1
Problem formulation
While a Poisson reconstruction [KBH06] can directly give
us an implicit function such that its gradient best ﬁts a nor-
mal ﬁeld, we cannot have recourse to such a direct linear
solve as we only have a direction ﬁeld (i.e., unoriented nor-
mals) through our Voronoi-PCA tensors. We need instead to
ﬁnd an implicit function f such that its gradient ∇f is every-
where best aligned to the the maximum eigenvalue direction
of the tensor ﬁeld C, where the notion of "best alignment" is
weighted by the local conﬁdence in the normal direction. We
propose the following constrained maximization procedure
to efﬁciently ﬁnd such a function f:
Given a tensor ﬁeld C, ﬁnd the maximizer f of:
ED
C (f) =
Z
Ω
∇f t C ∇f subject to:
Z
Ω

|∆f|2+ε|f|2
= 1,
where Ωis the domain, and ∆is the Laplacian operator.
The interpretation of this optimization problem is as follows.
The energy function ED
C , called anisotropic Dirichlet energy,
directly measures the alignment of ∇f with the normal direc-
tion indicated by C. Indeed, an isotropic tensor (i.e., unknown
normal direction) has little inﬂuence on this energy, whereas
an anisotropic tensor (i.e., high conﬁdence in the normal di-
rection) will play a major role—penalizing misalignment at
reliable data point. We then add as a constraint that ED
C must
be maximized over the unit ball deﬁned by the biharmonic
energy. Just like the Dirichlet (harmonic) energy is a mea-
sure of the smoothness f, the biharmonic energy measures
the smoothness of ∇f: therefore, this added constraint im-
poses a regularization of the maximizer f. A small amount
of the L2 norm of f is added to avoid having to constraint
values of f (either on the boundary or inside the domain), as
well as to improve conditioning: the resulting constraint is a
Sobolev-like norm EB on f. In practice, however, we replace
this regularization term by a small amount of data ﬁtting as
we will discuss in Section 3.3.
Solving for this constrained maximization amounts to care-
fully balance smoothness of ∇f vs. alignment of the gradient:
it will align ∇f to C if it is particularly rewarding for the
anisotropic Dirichlet energy (i.e., when the normal direction
is particularly reliable); on areas where the tensor is isotropic,
the solver will favor smoothness of the function gradient
instead. This global balancing act implicitly induces a con-
sistent orientation to the tensor ﬁeld since ﬂipping the sign
of ∇f between two incident vertices of the simplicial mesh
signiﬁcantly increases the biharmonic energy.
3.2
Discrete Formulation
We now assume that we have a tetrahedral mesh of the 3D
domain with V vertices {vi} and E edges {ei}. Each edge
ei is arbitrarily oriented. Given this mesh with a tensor Ci at
each vertex i, we wish to solve for a node-based, piecewise
linear function f, i.e., to ﬁnd a vector F = (f1, f2,..., fV )t
that satisﬁes the aforementioned constrained maximization.
Discrete Anisotropic Dirichlet Energy The energies in-
volved in the optimization are rather simple to express. Al-
though various expressions of the anisotropic Dirichlet en-
ergy have been proposed in 2D in the context of quasi-
harmonic parameterizations [Gus02, ZRS05], we construct
our 3D energies via matrix assembly using the language of
discrete forms [DKT06]. Thus, ED
C (F) is expressed as:
ED
C (F) ≈Ft A F with A = dt
0 ⋆
1
C d0
where d0 is the transpose of the signed vertex/edge incidence
matrix (size ExV) of the mesh, and ⋆1
C is the Hodge star oper-
ator for the metric induced by C. We approximate this latter
operator by the Euclidean diagonal Hodge star ⋆1 modulated
by the tensor C, resulting in the following diagonal matrix:
∀i = 1...E, (⋆
1
C)ii = et
i Cei
et
i ei
(⋆
1)ii
with: (⋆
1)ii = |e∗
i |
|ei| ,
where ei is the ith (oriented) edge, |ei| is its length, and |e∗
i |
is the area of its dual Voronoi face. The value of the tensor
C on an edge is found by averaging the tensor values at each
vertex of the edge.
Discrete Biharmonic Energy For the biharmonic energy,
the following (simpliﬁed) discretization performs adequately
in practice (regularization will be added later through a data
ﬁtting term):
EB(f) ≈Ft B F with
B = (dt
0 ⋆
1 d0)2
where we used the same notations as above.
Optimization Procedure Using a Lagrange multiplier λ, we
can now rewrite the constrained optimization as a maximiza-
tion of the following functional:
E = FtAF +λ(1−FtBF).
A necessary condition of optimality is ∂E/∂F = 0, yielding:
AF = λBF.
This expression expresses what is known as a generalized
eigenvalue problem (GEP), where F is an eigenvector of
this GEP, and λ is its corresponding eigenvalue. In fact, the
solution to our constrained maximization is the eigenvector
of the GEP corresponding to the largest eigenvalue.
c
⃝The Eurographics Association 2007.


--- Page 5 ---

P. Alliez et al. / Voronoi-based Variational Reconstruction of Unoriented Point Sets
Proof: Since the eigenvectors of a GEP form a basis, we can
write a function F as:
F = ∑aλFλ,
where Fλ is the eigenvector corresponding to the eigen-
value λ (i.e., AFλ = λBFλ) such that Ft
λBFλ = 1 and, for
λ1 ̸= λ2, Ft
λ1BFλ2 = 0. Therefore:
ED
C = (∑
λ
aλFλ)tB(∑
λ
λaλFλ)=∑
λ
λa2
λ ≤∑
λ
λmaxa2
λ = λmax.
Since the energy is bounded by the max eigenvalue λmax and
this value is attained by ED
C (Fλmax), we get: F = Fλmax.□
3.3
Generalizations
So far, our Voronoi-based variational approach requires no
parameter-tweaking to provide a reconstruction of a point
set. We can, however, easily extend this basic approach while
keeping the exact same framework. In particular, the matrix B
that contains the discrete biLaplacian can be modiﬁed in var-
ious ways to allow for more control over smoothness and/or
interpolation:
• Data ﬁtting: we can change the optimization results by
adding a term that controls data ﬁtting. We favor a value of
0 on the input points by adding to the constraint a ﬁtting
factor times the sum of the squares of the function values at
input points. Changing the ﬁtting factor will provide a con-
trollable data ﬁtting effect to our procedure. Variants, e.g.,
where data ﬁtting is spatially varying, are easily designed.
• Splines-under-tension energy: instead of only using the
biLaplacian, we can constrain the optimization over a unit
ball deﬁned by a linear combination of the Dirichlet and
the biharmonic energies. It will allow for a better tradeoff
between smoothness of the results vs. ﬁtting of the normal
directions, as it is tantamount to a splines-under-tension
energy [SW90].
The matrix B needs to be slightly modiﬁed in order to im-
plement these two generalizations as we will detail in Sec-
tion 4.3. While we only experimented with these two exam-
ples (and we will detail their implementation next), other
modiﬁcations of A and/or B are possible, yet indubitably
application-dependent.
4
Implementation
Our technique was implemented in C++. We now describe the
algorithm along with the implementation choices we made
for each of its steps.
4.1
Voronoi-PCA Estimation
As our algorithm has been implemented using the CGAL
library [CGA03], this step is straightforward. After reading
in the input point set and adding a few dummy points on
a large bounding sphere, we compute its Voronoi diagram.
We then use the iterative procedure described in Section 2
to ﬁnd a tensor per input point, using the formulas given in
Appendix A to optimize the covariance matrix computations.
4.2
Delaunay Reﬁnement
Before performing the constraint optimization, we must re-
ﬁne and improve the Delaunay tetrahedral mesh (dual of
the Voronoi diagram previously computed) of our domain:
since the point set can be arbitrary, any numerical approxi-
mation evaluated on the initial mesh would inevitably lead
to numerical degeneracies due to the poor aspect ratio of
tets. We thus have recourse to a Delaunay reﬁnement pro-
cedure [RY06]: this simple priority-queue-based treatment
iteratively improves tetrahedra with radius edge ratio greater
than a threshold (set to 2 in all our tests) by adding Steiner
points. At each Steiner point inserted to the triangulation, we
set the tensor Ci to the 3x3 identity matrix to remain agnostic
as to the normal direction there. In order to limit the size
of the ﬁnal mesh, we restrict the reﬁnement to an enlarged
bounding box of the input point set. Optionally, we can also
reﬁne the mesh within a thin shell around the input data by
enforcing a maximum edge length as well, providing more
degrees of freedom to the implicit function where it matters.
Figure 4 illustrates this process in 2D and 3D. Note that this
reﬁnement procedure is akin to the use of a restricted octree
in, e.g., [KBH06]. We point out however that we do, instead,
keep the original points, preventing any local “oversmooth-
ing” that appears in methods where the input point set is
discarded in favor of a substitute (regular or adaptive) grid.
Figure 4: Delaunay reﬁnement. (top) 2D Delaunay triangulation
(left) of a point set sampling a curve is iteratively reﬁned by adding
Steiner points with (right) or without (middle) sizing constraints
within a shell around input points; (bottom) Example in 3D.
4.3
Solver
We solve the generalized eigenvalue problem AF = λBF
by turning it into a classical eigenvalue problem. We ﬁrst
precompute a Cholesky factorization of B using the TAUCS
library [TCR05]; this results in a lower triangular matrix L
such that B = LLt. We now rewrite the GEP as:
AF = λLLtF ⇔L
−1AL
−tLtF = λLtF ⇔
L−1AL−tG = λG
G = LtF
We then employ the implicitly restarted Arnoldi iteration
method from the ARPACK++ library [GS], with L−1AL−t as
the Arnoldi operator and by requesting the maximum eigen-
value only. After convergence, we ﬁnd the solution F by
solving LtF = G, as it corresponds to the eigenvector cor-
responding to the maximum eigenvalue of the original GEP.
This eigenvector deﬁnes a piecewise linear function over the
tetrahedral mesh: we are now ready for contouring.
c
⃝The Eurographics Association 2007.


--- Page 6 ---

P. Alliez et al. / Voronoi-based Variational Reconstruction of Unoriented Point Sets
Additional Terms Instead of only using the bilaplacian, we
also add to B a data ﬁtting matrix (denoted D) times a pa-
rameter µﬁt, as discussed in Section 3.3. The matrix D is a
simple diagonal matrix with 1s only on the rows correspond-
ing to input points (i.e., for all points but the Steiner points
added by Delaunay reﬁnement). The parameter µﬁt not only
allows us to tune the amount of data ﬁtting, but also to tune
the separation between connected components (see Fig. 8).
Note also that we always include at least a small amount of
data ﬁtting term (µﬁt > 10−4) to efﬁciently substitute for the
ε regularizing term in the smoothness constraint. Similarly,
we add µ∆dt
0 ⋆1 d0 to offer more control over smoothness as
described in Section 3.3. Once the user has chosen values for
the coefﬁcients µﬁt and µ∆, the solver proceeds as explained
with the matrix B set to: B = (dt
0 ⋆1 d0)2 +µﬁtD+µ∆dt
0 ⋆1 d0.
4.4
Contouring
To ﬁnd which isocontour to extract, we ﬁrst evaluate the re-
sulting function at all input points (not Steiner points), and
pick the median value for contouring (outliers may affect
the average; we found that the median provides a more ro-
bust isovalue). For the ﬁnal isocontouring, either a simple
marching-tetrahedra algorithm or a Delaunay-based surface
meshing algorithm [BO05] can be used. We prefer the latter
as it generates meshes with fewer elements, and with guar-
anteed quality of the mesh elements (all triangle angles are
between 20 and 140 degrees). Figure 9 illustrates outputs of
the Delaunay-based meshing algorithm with three uniform
sizing criteria.
5
Results
Before showing results of our reconstruction technique, we
present some numerical experiments on our Voronoi-PCA
method.
Figure 5: Poles vs. covariance matrices in 2D. A point set samples
two parallel lines; (bottom) from left to right, we translate the sam-
ples of the bottom line slowly; pole-based normal estimates are
depicted in blue, while our covariance-based normal estimates (de-
riving from the Voronoi cells displayed as well) are in red; (top) the
two curves compare the pole-based results (blue, very discontinuous)
with the covariance-based estimate (red) using the angle error (in
degrees) as the bottom line of points is shifted.
5.1
Voronoi-PCA Estimation
We ﬁrst illustrate how our integral-based normal estimation
technique provides improved numerics compared to the usual
pole-based approach by examining a very simple point set
conﬁguration, where 2D points are sampled uniformly along
two parallel lines. When the bottom line is slowly shifted, the
shape of the Voronoi cells evolves, triggering (often discontin-
uous) changes in the pole-based normal estimates. Because
our approach relies on the integrated moment of the cells,
it is signiﬁcantly less sensitive to the shift as shown by the
curve in Fig. 5. Notice also that while a k-nearest neighbor
PCA approximation can dramatically lose accuracy when
the (Euclidean-based) neighbors include points of both lines,
our approach beneﬁts from the global nature of the Voronoi
diagram, making it more robust to sparse sampling.
The next experiment compares our normal estimation tech-
nique for 3D parametric surfaces with both pole and point-
based PCA approaches. We sample a height ﬁeld z =
sin(x)cos(y) (for which normals are known analytically) with
different sampling criteria:
• Noise free: The height ﬁeld is ﬁrst sampled on a regular
grid in parameter space in the interval [−π,π]2, with rates
ranging from 20×20 samples to 100×100 samples.
• Noise in parameter space. The height ﬁeld is then sam-
pled on a jittered grid in parameter space, with the same var-
ious densities as above. The noise is uniform and isotropic,
with a maximum magnitude of half the grid spacing to
make it scale with sampling density.
• Noise in embedding space. The samples of the ﬁrst case
(regular grid) are now jittered in the embedding space using
an isotropic uniform noise of half the grid spacing.
Figure 6: Normal estimation on a parametric surface. (top) noise-
free sampling, (middle) noise added in parameter space, (bottom)
noise added in embedding space. The plots show the average angle
deviation in degrees as a function of the sampling density. Pole-based
estimation in blue, point-based PCA in green, and our covariance-
based estimation with a single Voronoi cell in red.
In these three contexts, we measure the average angle devi-
ation between normal estimates and true normals for each
sample density. For the point-based PCA technique, we al-
ways use the 8 nearest neighbors as it leads to the best esti-
mates. As Fig. 6 indicates, our approach is, across all tests,
either as good as or better than the two normal estimation
techniques that it is built upon. Comparing various normal
estimation techniques fairly is notoriously difﬁcult as many
c
⃝The Eurographics Association 2007.


--- Page 7 ---

P. Alliez et al. / Voronoi-based Variational Reconstruction of Unoriented Point Sets
parameters come into play, such as sampling density, sam-
pling anisotropy, noise, and outliers—so our tests are not
intended to be extensive and conclusive. Nevertheless, we
conducted several other experiments (including a compari-
son with [MNG04]) that all show the numerical relevance
of using a Voronoi-based covariance approach. A theoretical
analysis of our normal estimation technique, which should
draw upon Voronoi diagrams, principal component analysis,
and possibly geometric measure theory, is left to future work.
5.2
Surface Reconstruction
As a proof-of-concept example, we begin with a 2D experi-
ment to exemplify the similarities and differences between
our approach and the Poisson-based method performed on
the same simplicial mesh (i.e., we implemented the Poisson
equation of [KBH06] on a triangle mesh using the discretiza-
tion described in [TLHD03]). As Fig. 7 illustrates, the ﬁrst
point set (dense, noise-free) is easily oriented using pole la-
beling (red/blue dots are poles), which allows us to use Pois-
son equation for reconstruction. Both methods lead to very
similar reconstructed curves. When the sampling is sparser,
the pole-based orienting process fails to provide the “right”
orientation, and the Poisson reconstruction reﬂects this error,
while the optimal implicit function remains quite unchanged.
Figure 7: Comparison with Poisson reconstruction in 2D. (top) our
approach is very similar to a Poisson reconstruction for dense point
sets as the normal orientations can reliably be deduced; (bottom)
for sparser/noisier unoriented datasets, local orientation becomes
prone to errors, while our variational approach remains valid.
We also illustrate the effects of tuning the parameters (in 2D
for clarity). µ∆allows controlling the smoothness (Fig. 8, top).
µﬁt controls the ﬁtting of the input points, and hence the sep-
aration of two components (Fig. 8, middle). It also provides
a way to increase the contrast of the implicit function for
nested components (Fig. 8, bottom left). A shape completion
example from a sparse dataset, obtained with our splines-
under-tension energy, is also shown (Fig. 8, bottom/middle).
Our last 2D example illustrates (Fig. 10) the resilience to
both sparsity of the point set as well as noise (including few
outliers) in the data.
We also processed a number of 3D point sets issued from
(laser range) scanners. A golf club head with 14K points
(Fig. 11), a kitten model of genus 1 (Fig. 9), a bunny (Fig. 12),
and a bust model with 250K points (Fig. 1) are presented. Ad-
ditionally, we show in Fig.13 that our method applied to a
Figure 8: Reconstruction Parameters. (top) adjusting µ∆(left to
right) permits easy tuning of the resulting smoothness, (middle) while
µﬁt controls the ﬁt to the input point (middle & right), allowing to
accurately separate and capture ﬁne, nearby surface layers. (bot-
tom) data ﬁtting allows the reconstruction of nested components
(left); smooth completion of sparse dataset is easily achieved using
our splines-under-tension energy (middle); separate components of
different geometric complexity can also be captured accurately.
Figure 9: Kitten. (top) 20K input point set, Steiner points and implicit
function, and shaded reconstructed surface obtained by marching-
tetrahedra. (bottom) three output meshes at increasing resolutions.
raw, unoriented point set (206K points) recovers a similar sur-
face to the Poisson reconstruction from [KBH06] for which
additional normal information was provided. We note that
even at octree depth 11, the Poisson-based mesh is compar-
atively oversmoothed, mostly due to the interpolation of the
normals onto the octree leaves. If such an oversmoothing is
desirable, we can similarly interpolate the tensor ﬁeld around
the input points, or simply increase the smoothness by tuning
our two parameters (as demonstrated in Fig. 8).
c
⃝The Eurographics Association 2007.


--- Page 8 ---

P. Alliez et al. / Voronoi-based Variational Reconstruction of Unoriented Point Sets
Timings and Limitations On a laptop (1.8GHz, 2 GBytes)
our current implementation constructs the initial Delaunay
triangulation of the kitten (20K vertices, 132K tets, Fig. 9) in
1.2s, and Delaunay-reﬁnes it to 30K vertices in 6s. The ma-
trix A contains around 8 non-zero elements per line, while B
has around 35 non-zero elements per line. The Cholesky fac-
torization takes 23s (including TAUCS super-nodal ordering).
The 51 Arnoldi iterations to convergence take a total of 42s.
The data structures used in our algorithm scale linearly in
memory (in particular, a Delaunay tetrahedralization scales
linearly in practice, and the number of non-zero elements per
line in our matrices does not depend on the size of the model).
The only bottleneck to a good scalability of the algorithm is
the Cholesky factor: its memory requirement is high (2e+7
non-zero elements for the kitten). Out-of-core factorization is
a viable option that we use for large models like Bimba and
Sforza, but the overall timings consequently suffer (up to 25
minutes for 250K input points), and the super-nodal ordering
still requires in-core execution. For larger datasets a 64-bit
machine would be indispensable to address these memory
issues.
Discussion Our approach offers a unique mix between
Voronoi-based methods (to estimate normals via PCA),
implicit-based approaches (as an implicit function is glob-
ally optimized to allow for smooth approximation through
isocontouring), and spectral techniques (as our optimization
procedure is expressible as a generalized eigenvalue prob-
lem). It empirically matches the results of oriented point set
reconstruction techniques such as Poisson reconstruction, but
without the need for normal orientation. We note that the
closest existing approach is, from a numerical point of view,
Figure 10: Noise and Sparsity Resilience. (top) our approach can
handle from dense (left) to sparse (right) raw datasets without any
parameter tweaking; (bottom) similarly, results degrade gracefully
with noise (left, middle), even in the case of outliers (right).
Figure 11: Golf club. A scanned point set (14k points), and its recon-
struction seen from various angles.
the work of [WCS05] as they too use a GEP with multiple en-
ergy terms. However, our technique differs quite drastically
in its premises as, e.g., they do not make use of anisotropic
energies or tensors, they rely on regular grids only, and do
not try to infer normal directions prior to the GEP, resulting
in a delicate parameter tweaking to avoid spurious surface
oscillations in the results.
Finally, a hybrid approach between our contribution and Pois-
son reconstruction might be most desirable for massive data:
our approach could be used to orient a subsampled version of
a raw, unoriented point set, thus inducing an orientation for
the initial point set on which a Poisson solve can then be per-
formed. Additionally, as conﬁdence estimation of the normal
direction might become part of the measurements provided
by newer scanning devices, our technique could directly ex-
ploit this additional information. Similarly, conﬁdence in the
sample points could be incorporated through local variation
of µﬁt.
6
Conclusion
We have presented an algorithm for reconstructing watertight
surfaces, offering a uniﬁed approach for oriented and unori-
ented point sets. If no normal information is available, our
technique starts by estimating both normal direction and con-
ﬁdence in the estimate via a novel, noise-resilient Voronoi-
PCA procedure. The reconstruction then proceeds to ﬁnd an
implicit function that optimizes the alignment between its
gradient and the estimated/provided normal directions. Dis-
tinctive features of our approach include the use of tensors
in a generalized eigenvalue problem to balance ﬁtting and
smoothness based on data conﬁdence, as well as the ability
to add data ﬁtting and smoothness control.
Future work We wish to study the theoretical properties of
our normal estimation technique and its application to di-
mension detection (along the line of [DGGZ03]). Also, to
achieve what [KBH06] described as a desirable indicator
function, the L2 norm used in our paper (and in Poisson re-
construction) is obviously inappropriate, as sharp transitions
are overly penalized. An L1 norm would, instead, be best in
this case. However, it is not obvious that the computational
overhead that such a norm requires is worth the added ben-
eﬁts. Finally, our approach to turn a tensor into an oriented
vector ﬁeld (i.e., ∇f) might provide a new approach to appli-
c
⃝The Eurographics Association 2007.


--- Page 9 ---

P. Alliez et al. / Voronoi-based Variational Reconstruction of Unoriented Point Sets
cations such as quad remeshing, as a (curvature) tensor ﬁeld
could be processed along the line of our technique to provide
curvature-aligned meshes without user interaction.
Acknowledgments The authors wish to thank David
Bommes from RWTH Aachen for his help with ARPACK.
Partial funding from the EU Network of Excellence
AIM@SHAPE (IST NoE No 506766), the EU FET-
Open project ACS (IST No 006413), NSF (CAREER
CCR-0133983, and ITR DMS-0453145), DOE (DE-FG02-
04ER25657), and Pixar.
References
[AB99]
AMENTA N., BERN M. W.: Surface reconstruction by
Voronoi ﬁltering. GEOMETRY: Discrete & Computational Ge-
ometry 22 (1999).
[BC02]
BOISSONNAT, CAZALS: Smooth surface reconstruction
via natural neighbour interpolation of distance functions. CGTA:
Computational Geometry: Theory and Applications 22 (2002).
[BO05]
BOISSONNAT J.-D., OUDOT S.: Provably good sampling
and meshing of surfaces. Graph. Models 67, 5 (2005), 405–451.
[Boi84]
BOISSONNAT J.-D.:
Geometric structures for three-
dimensional shape representation. ACM Trans. on Graphics 3, 4
(1984), 266–286.
[CBC∗01]
CARR J. C., BEATSON R. K., CHERRIE J. B.,
MITCHELL T. J., FRIGHT W. R., MCCALLUM B. C., EVANS
T. R.: Reconstruction and representation of 3D objects with radial
basis functions. In SIGGRAPH (2001), pp. 67–76.
[CG06]
CAZALS F., GIESEN J.: Delaunay triangulation based
surface reconstruction. In Effective Computational Geometry for
Curves and Surfaces, Boissonnat J., Teillaud M., (Eds.). Springer-
Verlag, Math. and Visualization, 2006, pp. 231–276.
[CGA03]
Computational Geometry Algorithms Library CGAL-
3.2. http://www.cgal.org/, 2003.
[CP03]
CAZALS F., POUGET M.: Estimating differential quanti-
ties using polynomial ﬁtting of osculating jets. In Symposium on
Geometry Processing (2003), pp. 177–187.
[Dey06]
DEY T. K.: Curve and Surface Reconstruction: Algo-
rithms with Mathematical Analysis. Cambridge Monographs on
Applied and Computational Mathematics, 2006.
[DGGZ03]
DEY T. K., GIESEN J., GOSWAMI S., ZHAO W.:
Shape dimension and approximation from samples. Discrete &
Computational Geometry 29, 3 (2003).
Figure 12: Bunny. (left) the eigenvector (in false colors) of the solu-
tion of the generalized eigenvalue problem for the Bunny dataset—
see also Fig. 4; (right) the hole at the bottom is ﬁlled.
[DKT06]
DESBRUN M., KANSO E., TONG Y.: Discrete differen-
tial forms for computational modeling. In Discrete Differential
Geometry. ACM SIGGRAPH Course Notes, 2006.
[DLS05]
DEY T. K., LI G., SUN J.: Normal estimation for point
clouds: A comparison study for a Voronoi based method. In
Symposium on Point-Based Graphics (2005), pp. 39–46.
[DS05]
DEY T. K., SUN J.: Normal and Feature Estimations from
Noisy Point Clouds. Tech. Rep. OSU-CISRC-7/50-TR50, Ohio
State University, 2005.
[GS]
GOMES F. M., SORENSEN D. C.: ARPACK++: A C++
implementation of ARPACK eigenvalue package.
[Gus02]
GUSKOV I.: An anisotropic parameterization scheme. In
Proc. of Int. Meshing Roundtable (2002), pp. 325–332.
[HDD∗92]
HOPPE H., DEROSE T., DUCHAMP T., MCDONALD
J., STUETZLE W.:
Surface reconstruction from unorganized
points. In Proc. of ACM SIGGRAPH (1992), pp. 71–78.
[HK06]
HORNUNG A., KOBBELT L.: Robust reconstruction of
watertight 3D models from non-uniformly sampled point clouds
without normal information. In Symposium on Geometry Process-
ing (2006), pp. 41–50.
[HXMP05]
HU G., XU J., MIAO L., PENG Q.: Bilateral estima-
tion of vertex normal for point-sampled models. In Int. Conf. on
Comp. Science and Appl. (2005), vol. 3480, pp. 758–768.
[KBH06]
KAZHDAN M., BOLITHO M., HOPPE H.: Poisson Sur-
face Reconstruction.
In Symposium on Geometry Processing
(2006), pp. 61–70.
[KSO04]
KOLLURI R., SHEWCHUK J. R., O’BRIEN J. F.: Spec-
tral surface reconstruction from noisy point clouds. In Symposium
on Geometry Processing (2004), pp. 11–21.
[LP05]
LANGE C., POLTHIER K.: Anisotropic smoothing of point
sets. Computer Aided Geometric Design 22, 7 (2005), 680–692.
[MM06]
MORDOHAI P., MEDIONI G.: Tensor Voting: A Percep-
tual Organization Approach to Computer Vision and Machine
Learning. Morgan & Claypool, 2006.
[MNG04]
MITRA N. J., NGUYEN A., GUIBAS L.: Estimating
surface normals in noisy point cloud data. In Int. J. of Comp.
Geometry and Applications (2004), vol. 14(4–5), pp. 261–276.
[OBA∗03]
OHTAKE Y., BELYAEV A., ALEXA M., TURK G.,
SEIDEL H.-P.: Multi-level partition of unity implicits. In Proc.
of ACM SIGGRAPH (2003), vol. 22(3), pp. 463–470.
[OF05]
OUYANG D., FENG H.-Y.: On the normal vector estima-
tion for point cloud data from smooth surfaces. Computer-Aided
Geometric Design 37, 10 (2005), 1071–1079.
[PKKG03]
PAULY M., KEISER R., KOBBELT L. P., GROSS M.:
Shape modeling with point-sampled geometry. In (SIGGRAPH)
(2003), vol. 22(3) of ACM Trans. on Graphics, pp. 641–650.
[PSQ06]
PARIS S., SILLION F. X., QUAN L.: A surface recon-
struction method using global graph cut optimization. Int. J. Com-
put. Vision 66, 2 (2006), 141–161.
[PWY∗06]
POTTMANN H., WALLNER J., YANG Y.-L., LAI Y.-
K., HU S.-M.: Principal curvatures from the integral invariant
viewpoint. Comput. Aided Geom. Design (2006). in print.
[RY06]
RINEAU L., YVINEC M.: A generic software design for
Delaunay reﬁnement meshing. Tech. Rep. 5983, INRIA, 2006.
c
⃝The Eurographics Association 2007.


--- Page 10 ---

P. Alliez et al. / Voronoi-based Variational Reconstruction of Unoriented Point Sets
[SM00]
SHI J., MALIK J.: Normalized cuts and image segmen-
tation. In Transactions on Pattern Analysis and Machine Intelli-
gence (2000), pp. 888–905.
[SW90]
SMITH W. H. F., WESSEL P.: Gridding with continuous
curvature splines in tension. Geophysics 55, 3 (1990), 293–305.
[TCR05]
TOLEDO S., CHEN D., ROTKIN V.: TAUCS. Available
at http://www.tau.ac.il/∼stoledo/taucs, 2005.
[TLHD03]
TONG Y., LOMBEYDA S., HIRANI A. N., DESBRUN
M.: Discrete multiscale vector ﬁeld decomposition. In ACM
SIGGRAPH (2003), pp. 445–452.
[WCS05]
WALDER C., CHAPELLE O., SCHÖLKOPF B.: Implicit
surface modelling as an eigenvalue problem. In Machine Learning
ICML 2005 (2005), pp. 936–939.
[ZRS05]
ZAYER R., R OSSL C., SEIDEL H.-P.: Setting the bound-
ary free: A composite approach to surface parameterization. In
Symposium on Geometry Processing (2005), pp. 91–100.
A
Computing Covariance Matrices
Consider a given polyhedron Ω(either a bounded Voronoi cell V
or the union of a set of such Voronoi cells). We can compute its
covariance matrix around an arbitrary point p (center of mass in
our application) by decomposing Ωinto tetrahedra Ti formed by
the triangles in a triangulation of the boundary surface and p, in a
fashion similar to the computation of volume. Note that some of
these tetrahedra may have negative volumes.
Without loss of generality, we can assume p to be the coor-
dinates origin (by taking the relative coordinates w.r.t. p). For
a single arbitrary tetrahedron T we start by considering the
linear transform N that maps the canonical tetrahedron
¯T =
((0,0,0)t,(1,0,0)t,(0,1,0)t,(0,0,1)t) to T = (p,a,b,c). Consider
the 3×3 matrix N deﬁned as:
N =
 a
b
c

The order-2 moment matrix of T with respect to its base point p is
deﬁned as det(N)NQNt, where Q is the order-2 moment matrix of
the canonical tetrahedron ¯T with respect to the origin:
Q =
ZZZ
¯T


x2
xy
xz
yx
y2
yz
zx
zy
z2

dxdydz =
1
120


2
1
1
1
2
1
1
1
2


The covariance matrix of Ωis then deﬁned as
cov(Ω) = ∑
i
det(Ni)Ni QNt
i .
Note that this expression is valid independently of whether Ωis
convex or not.
Computation Speedup To speedup the computation of covariance
matrices for unions of Voronoi cells U, we ﬁrst compute the covari-
ance matrix for each Voronoi cell Vi around its own center of mass.
Now consider shifting the centroid of Vi from origin to p; we have:
Z
Vi
(X + p)(X + p)tdV =
Z
Vi
(XXt +X pt + pXt + ppt)dV
= cov(Vi)+mippt,
where X means the relative coordinate w.r.t. the centroid of V, and
mi is the volume of Vi. The covariance matrix of the union becomes:
cov(U) = ∑
i

cov(Vi)+mipipt
i

,
where pi is the displacement from the centroid of U to the centroid
of Vi.
Figure 13: Comparison with Poisson reconstruction in 3D. Without
any normal information, our method (left) results in a similar shape
(albeit less oversmoothed) to a Poisson reconstruction (octree depth
11) for which oriented normals were provided.
c
⃝The Eurographics Association 2007.
